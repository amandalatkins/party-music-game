{"version":3,"sources":["components/ScoreBar.js","components/Album.js","components/GameContainer.js","App.js","index.js"],"names":["ScoreBar","props","className","gameActive","currentMessage","score","Album","src","cover","onClick","setScore","id","isClicked","artist","alt","GameContainer","state","highScore","albums","winGame","getAlbums","randAlbums","i","randNum","Math","floor","random","allAlbums","length","rand","chosen","indexOf","push","randIndex","setState","endGame","reset","message","console","log","updateAlbums","updateIndex","findIndex","album","parseInt","shuffle","this","map","key","React","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.335d58a7.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction ScoreBar(props) {\n    return (\n        <div className=\"container game\">\n            <div className=\"row\">\n                <div className=\"col-7\">\n                    <p className={props.gameActive ? \"gameMessage bg-success\" : \"gameMessage bg-danger\"}>\n                        {props.currentMessage}\n                    </p>\n                </div>\n                <div className=\"col-5 text-right\">\n                    <p className=\"gameScore\">\n                        <strong>Music Rating: {props.score}</strong>\n                    </p>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default ScoreBar;","import React from \"react\";\n\nfunction Album(props) {\n    return (\n        <img \n            className=\"album\"\n            // className={props.isClicked ? \"clicked album\" : \"album\"}\n            src={props.cover}\n            onClick={() => props.setScore(props.id, props.isClicked, props.artist+\"! Good choice.\")}\n            alt={`Album by ${props.artist}`}\n        />\n    );\n}\n\nexport default Album;","import React from \"react\";\n// import PlayBoard from \"./PlayBoard\";\nimport ScoreBar from \"./ScoreBar\";\nimport Album from \"./Album\";\nimport allAlbums from \"../config/albums.json\";\nimport shuffle from \"shuffle-array\";\n\nclass GameContainer extends React.Component {\n    state = {\n        score: 0,\n        highScore: 0,\n        albums: [],\n        gameActive: true,\n        currentMessage: \"Click a record to start the party!\",\n        winGame: false\n    }\n\n    componentDidMount() {\n        this.getAlbums();\n    }\n\n    getAlbums = () => {\n        // Pick 16 random albums from album.js to setup our game\n        // For now, we'll just get 16 album covers\n        var randAlbums = [];\n        for (var i = 0; i < 16; i++) {\n\n            var randNum = () => Math.floor(Math.random() * allAlbums.length);\n            var rand = randNum();\n\n            var chosen = [];\n\n            while(chosen.indexOf(allAlbums[rand].artist) > -1) {\n                rand = randNum();\n            }\n\n            chosen.push(allAlbums[rand].artist);\n\n            var randIndex = Math.floor(Math.random() * allAlbums[rand].albums.length);\n\n            randAlbums.push({\n                id: i,\n                artist: allAlbums[rand].artist,\n                cover: allAlbums[rand].albums[randIndex]\n            });\n        }\n        this.setState({ albums: randAlbums });\n    }\n\n    endGame = () => {\n        var reset = {\n            score: 0,\n            gameActive: false,\n            currentMessage: \"You already played that. Buzz kill.\"\n        };\n\n        if (this.state.score > this.state.highScore) {\n            reset.highScore = this.state.score;\n        }\n        this.setState(reset);\n        this.getAlbums();\n    }\n\n    // startConfetti = () => {\n    //     var end = Date.now() + (15 * 1000);\n\n    //     var interval = setInterval(function() {\n    //         if (Date.now() > end) {\n    //             return clearInterval(interval);\n    //         }\n\n    //         confetti({\n    //             startVelocity: 30,\n    //             spread: 360,\n    //             ticks: 60,\n    //             shapes: ['square'],\n    //             origin: {\n    //                 x: Math.random(),\n    //                 // since they fall down, start a bit higher than random\n    //                 y: Math.random() - 0.2\n    //             }\n    //         });\n    //     }, 200);\n\n    //     return interval;\n    // }\n\n\n\n    // HANDLE WIN GAME, THROW CONFETTI + MODAL\n\n    winGame = () => {\n\n        var reset = {\n            score: 0,\n            gameActive: true,\n            currentMessage: \"Killer party! Throw another one!\",\n            winGame: true\n        };\n        if (this.state.score+1 > this.state.highScore) {\n            reset.highScore = this.state.score;\n        }\n        this.setState(reset);\n    }\n\n    setScore = (id, isClicked, message) => {\n        console.log(\"setting score\");\n        if (!isClicked) {\n            var updateAlbums = this.state.albums;\n            var updateIndex = updateAlbums.findIndex(album => album.id === id);\n            updateAlbums[updateIndex].isClicked = true;\n            \n            if (parseInt(this.state.score)+1 === 16) {\n                this.winGame();\n            } else {\n                this.setState({ score: parseInt(this.state.score)+1, currentMessage: message, albums: shuffle(updateAlbums), gameActive: true});\n            }        \n        } else {\n            this.endGame();\n        }\n    }\n\n    render() {\n            return (\n                <div>\n                    {/* IMPORT A MODAL AND CONFETTI ON WIN GAME */}\n                    {this.state.winGame ? \"\" : \"\"}\n                    <div className=\"jumbotron\">\n                        <div className=\"container\">\n                            <h1 className=\"display-4\">Party Music Pandemoneum!</h1>\n                            <p className=\"lead\">You're hosting a party and spinning your favorite records! Click on an album to play it, but be careful to only play it once during the party lest you kill the mood!</p>\n                            <br/>\n                            <p><strong>Highest Music Rating: </strong>{this.state.highScore}</p>\n                        </div>\n                    </div>\n                    <ScoreBar score={this.state.score} currentMessage={this.state.currentMessage} gameActive={this.state.gameActive}/>\n                    <div className=\"container game\">\n                        <div className=\"row\">\n                            {this.state.albums.map(album => (\n                                <div className=\"col-3 mb-4\" key={album.id}>\n                                    <Album \n                                        cover={album.cover}\n                                        artist={album.artist}\n                                        id={album.id}\n                                        isClicked={album.isClicked}\n                                        setScore={this.setScore}\n                                    />\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n\n                </div>\n            );\n    }\n\n}\n\nexport default GameContainer;","import React from \"react\";\nimport GameContainer from \"./components/GameContainer\";\n\nfunction App() {\n    return <GameContainer />\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}