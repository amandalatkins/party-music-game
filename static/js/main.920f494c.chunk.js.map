{"version":3,"sources":["components/ScoreBar.js","components/Album.js","components/WinModal.js","components/GameContainer.js","App.js","index.js"],"names":["ScoreBar","props","className","gameActive","currentMessage","score","Album","style","backgroundImage","cover","onClick","setScore","id","isClicked","artist","WinModal","console","log","closeHandler","GameContainer","state","highScore","albums","winGame","confettiInterval","getAlbums","randAlbums","chosen","i","randNum","Math","floor","random","allAlbums","length","rand","indexOf","push","randIndex","setState","endGame","reset","startConfetti","end","Date","now","interval","setInterval","clearInterval","confetti","startVelocity","spread","ticks","shapes","origin","x","y","closeWinGame","message","updateAlbums","updateIndex","findIndex","album","parseInt","shuffle","this","map","key","React","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.920f494c.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction ScoreBar(props) {\n    return (\n        <div className=\"container game\">\n            <div className=\"row\">\n                <div className=\"col-7\">\n                    <p className={props.gameActive ? \"gameMessage bg-success\" : \"gameMessage bg-danger\"}>\n                        {props.currentMessage}\n                    </p>\n                </div>\n                <div className=\"col-5 text-right\">\n                    <p className=\"gameScore\">\n                        <strong>Music Rating: {props.score}</strong>\n                    </p>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default ScoreBar;","import React from \"react\";\n\nfunction Album(props) {\n    return (\n        <div className=\"album\" style={{backgroundImage: `url(${props.cover})`}}\n            onClick={() => props.setScore(props.id, props.isClicked, props.artist+\"! Good choice.\")}\n        ></div>\n    );\n}\n\nexport default Album;","import React from \"react\";\n\nfunction WinModal(props) {\n    console.log(props);\n    return (\n        <div className=\"winOverlay\">\n            <div className=\"winModal text-center p-5\">\n                <h3>Congratulations! You just threw the party of the year!</h3>\n                <br/>\n                <button \n                    className=\"btn-success btn\" \n                    onClick={() => props.closeHandler()}\n                >Throw Another Party!</button>\n            </div>\n        </div>\n    );\n}\n\nexport default WinModal;","import React from \"react\";\n// import PlayBoard from \"./PlayBoard\";\nimport ScoreBar from \"./ScoreBar\";\nimport Album from \"./Album\";\nimport allAlbums from \"../config/albums.json\";\nimport shuffle from \"shuffle-array\";\nimport WinModal from \"./WinModal\";\nimport confetti from \"canvas-confetti\";\n\nclass GameContainer extends React.Component {\n    state = {\n        score: 0,\n        highScore: 0,\n        albums: [],\n        gameActive: true,\n        currentMessage: \"Click a record to start the party!\",\n        winGame: false,\n        confettiInterval: \"\"\n    }\n\n    componentDidMount() {\n        this.getAlbums();\n    }\n\n    getAlbums = () => {\n        // Pick 16 random albums from albums.json to setup our game\n        var randAlbums = [];\n        var chosen = [];\n        for (var i = 0; i < 16; i++) {\n\n            var randNum = () => Math.floor(Math.random() * allAlbums.length);\n            var rand = randNum();\n\n            while(chosen.indexOf(allAlbums[rand].artist) > -1) {\n                rand = randNum();\n            }\n\n            chosen.push(allAlbums[rand].artist);\n\n            var randIndex = Math.floor(Math.random() * allAlbums[rand].albums.length);\n\n            randAlbums.push({\n                id: i,\n                artist: allAlbums[rand].artist,\n                cover: allAlbums[rand].albums[randIndex]\n            });\n        }\n        this.setState({ albums: randAlbums });\n    }\n\n    endGame = () => {\n        var reset = {\n            score: 0,\n            gameActive: false,\n            currentMessage: \"You already played that. Buzz kill.\"\n        };\n\n        if (this.state.score > this.state.highScore) {\n            reset.highScore = this.state.score;\n        }\n        this.setState(reset);\n        this.getAlbums();\n    }\n\n    startConfetti = () => {\n        var end = Date.now() + (15 * 1000);\n\n        var interval = setInterval(function() {\n            if (Date.now() > end) {\n                return clearInterval(interval);\n            }\n\n            confetti({\n                startVelocity: 30,\n                spread: 360,\n                ticks: 60,\n                shapes: ['square'],\n                origin: {\n                    x: Math.random(),\n                    y: Math.random() - 0.2\n                }\n            });\n        }, 200);\n\n        this.setState({ confettiInterval: interval });\n    }\n\n    winGame = () => {\n\n        var reset = {\n            score: 0,\n            gameActive: true,\n            currentMessage: \"Killer party! Throw another one!\",\n            winGame: true\n        };\n        if (this.state.score+1 > this.state.highScore) {\n            reset.highScore = this.state.score+1;\n        }\n        this.setState(reset);\n        this.startConfetti();\n    }\n\n    closeWinGame = () => {\n        clearInterval(this.state.confettiInterval);\n        this.getAlbums();\n        this.setState({ winGame: false, confettiInterval: \"\" });\n    }\n\n    setScore = (id, isClicked, message) => {\n        console.log(\"setting score\");\n        if (!isClicked) {\n            var updateAlbums = this.state.albums;\n            var updateIndex = updateAlbums.findIndex(album => album.id === id);\n            updateAlbums[updateIndex].isClicked = true;\n            \n            if (parseInt(this.state.score)+1 === 16) {\n                this.winGame();\n            } else {\n                this.setState({ score: parseInt(this.state.score)+1, currentMessage: message, albums: shuffle(updateAlbums), gameActive: true, winGame: false});\n            }        \n        } else {\n            this.endGame();\n        }\n    }\n\n    render() {\n            return (\n                <div>\n                    {this.state.winGame ? <WinModal closeHandler={this.closeWinGame} /> : \"\"}\n                    <div className=\"jumbotron\">\n                        <div className=\"container\">\n                            <h1 className=\"display-4\">Party Music Pandemoneum!</h1>\n                            <p className=\"lead\">You're hosting a party and spinning your favorite records! Click on an album to play it, but be careful to only play it once during the party lest you kill the mood!</p>\n                            <br/>\n                            <p><strong>Highest Music Rating: </strong>{this.state.highScore}</p>\n                        </div>\n                    </div>\n                    <ScoreBar score={this.state.score} currentMessage={this.state.currentMessage} gameActive={this.state.gameActive}/>\n                    <div className=\"container game\">\n                        <div className=\"row\">\n                            {this.state.albums.map(album => (\n                                <div className=\"col-3 mb-4\" key={album.id}>\n                                    <Album \n                                        cover={album.cover}\n                                        artist={album.artist}\n                                        id={album.id}\n                                        isClicked={album.isClicked}\n                                        setScore={this.setScore}\n                                    />\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n\n                </div>\n            );\n    }\n\n}\n\nexport default GameContainer;","import React from \"react\";\nimport GameContainer from \"./components/GameContainer\";\n\nfunction App() {\n    return <GameContainer />\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}